#Method 1

SELECT CASE
        WHEN P IS NULL THEN CONCAT(N,'ROOT')
        WHEN N IN (SELECT DISTINCT P FROM BST)THEN CONCAT(N,'INNER')
        ELSE CONCAT(N,'LEAF')
        END
FROM BST
ORDER BY N ASC;

#Method 2

SELECT N, IF(P IS NULL, 'Root', IF((SELECT COUNT(*) FROM BST WHERE P=B.N)>0, 'Inner', 'Leaf')) FROM BST AS B ORDER BY N;

#Method 3
SELECT N, IF(P IS NULL, 'Root', IF(B.N IN (SELECT P FROM BST), 'Inner', 'Leaf')) FROM BST AS B ORDER BY N;

#Method 4
SELECT N, CASE WHEN P IS NULL THEN 'Root' 
WHEN(SELECT COUNT(*) FROM BST WHERE P = A.N) > 0 THEN 'Inner'
ELSE 'Leaf'
END
FROM BST A
ORDER BY N;


#####################
We can use IF() function to solve this problem. First, the query returns N and node type from BST table and outputs result ordered by N. So the query looks 
like “SELECT N, IF() FROM BST ORDER BY N”. Next, check whether the node is root. If P is null, then the node will be root. The query can be “SELECT N, 
IF(P IS NULL, ‘Root’, IF()) FROM BST ORDER BY N”. Finally, check whether the node is leaf. If the node value appears in Column P, it will be ‘Inner’, 
otherwise ‘Leaf’. The query can be “SELECT N, IF(P IS NULL, ‘Root’, IF(B.N IN (SELECT P FROM BST), ‘Inner’, ‘Leaf’)). FROM BST AS B ORDER BY N”. Additionally, 
if the node value appears in Column P, then the number of p value that equals to the node value will be greater than 0. So the query can be “SELECT N, 
IF(P IS NULL, ‘Root’, IF((SELECT COUNT(*) FROM BST WHERE P=B.N))) FROM BST AS B ORDER BY N” as well.
